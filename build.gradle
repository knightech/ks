
plugins {
	id 'org.springframework.boot' version '2.2.0.M3'
	id 'java'
    id "com.commercehub.gradle.plugin.avro" version "0.16.0"
}

apply plugin: 'io.spring.dependency-management'
apply plugin: "com.commercehub.gradle.plugin.avro-base"

group = 'net.knightech'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

ext {
	confluentVersion='5.2.1'
	kafkaVersion = '2.1.0'
    jettyVersion='9.4.18.v20190429'
    jerseyVersion='2.28'
    jacksonVersion='2.9.9'
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/snapshot' }
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://packages.confluent.io/maven' }
}

List kafka = ["org.apache.kafka:kafka-clients:${kafkaVersion}"
             ,"org.apache.kafka:kafka-streams:${kafkaVersion}"]

List avro = ["org.apache.avro:avro:1.9.0"
             ,"io.confluent:kafka-streams-avro-serde:${confluentVersion}"
             ,"io.confluent:kafka-avro-serializer:${confluentVersion}"]

List web = ["io.confluent:monitoring-interceptors:${confluentVersion}"
                , "org.eclipse.jetty:jetty-server:${jettyVersion}"
                , "org.eclipse.jetty:jetty-servlet:${jettyVersion}"
                , "org.glassfish.jersey.containers:jersey-container-servlet:${jerseyVersion}"
                , "org.glassfish.jersey.inject:jersey-hk2:${jerseyVersion}"
                , "org.glassfish.jersey.media:jersey-media-json-jackson:${jerseyVersion}"]

defaultTasks 'clean', 'build'

dependencies {

    compile kafka, avro, web
    compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"

    implementation 'org.springframework.boot:spring-boot-starter'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        exclude group: 'junit', module: 'junit'
    }
}

task generateAvro(type: com.commercehub.gradle.plugin.avro.GenerateAvroJavaTask, dependsOn:'makePretty') {
    source("src/main/resources/avro")
    outputDir = file("dest/java")
}


task fixPluginAvro (type: Delete, dependsOn:'copyTask') {
    delete 'dest'
}

task copyTask (type: Copy, dependsOn:'generateAvro') {
    from 'dest/java'
    into 'src/main/java'
}

task makePretty(type: Delete) {
    delete 'dest'
    delete 'src/main/java/avro'
}

build.dependsOn fixPluginAvro

test {
	useJUnitPlatform()
}
